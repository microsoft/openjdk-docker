# build.yml Build pipeline to build JDK docker images. When running the pipeline
# replace "image-repository" value with the location of your docker images (e.g. hub.docker.io/...)
# replace the image tags as needed.

name: "$(Year:yyyy).$(Month).$(BuildID)"

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - .devops
      - .github/workflows
pr: none

parameters:
  - name: jobs
    type: object
    default:
      mariner_8:
        distro: mariner
        version: 8
        package: temurin-8
        image: "image-repository"
        tag: "image-tag"
      distroless_8:
        distro: distroless
        version: 8
        package: temurin-8
        installer_image: "image-repository"
        installer_tag: "2.0"
        base_image: "image-repository"
        base_tag: "2.0"
      ubuntu_11:
        distro: ubuntu
        version: 11
        package: msopenjdk-11
        image: "image-repository"
        tag: "image-tag"
      mariner_cm1_11:
        distro: mariner-cm1
        version: 11
        package: msopenjdk-11
        image: "image-repository"
        tag: "1.0"
      distroless_11:
        distro: distroless
        version: 11
        package: msopenjdk-11
        installer_image: "image-repository"
        installer_tag: "2.0"
        base_image: "image-repository"
        base_tag: "2.0"
      ubuntu_17:
        distro: ubuntu
        version: 17
        package: msopenjdk-17
        image: "image-repository"
        tag: "image-tag"
      mariner_cm1_17:
        distro: mariner-cm1
        version: 17
        package: msopenjdk-17
        image: "image-repository"
        tag: "1.0"
      distroless_17:
        distro: distroless
        version: 17
        package: msopenjdk-17
        installer_image: "image-repository"
        installer_tag: "2.0"
        base_image: "image-repository"
        base_tag: "2.0"

jobs:
  - job: build_internal
    displayName: "build internal "
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix: ${{ parameters.jobs }}
    steps:
      - script: |
          docker pull $(image):$(tag)
          docker tag $(image):$(tag) $(distro):$(tag)
        displayName: Docker pull and re-tag
        condition: and(succeeded(), ne(variables.distro, 'distroless'))

      - script: |
          docker pull $(installer_image):$(installer_tag)
          docker tag $(installer_image):$(installer_tag) $(distro):$(installer_tag)-installer

          docker pull $(base_image):$(base_tag)
          docker tag $(base_image):$(base_tag) $(distro):$(base_tag)-base
        displayName: Docker pull and re-tag distroless
        condition: and(succeeded(), eq(variables.distro, 'distroless'))

      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), ne(variables.distro, 'distroless'))
        inputs:
          command: build
          repository: internal/private/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.$(package)-jdk
          containerRegistry: "Java Engineering ACR"
          arguments: --build-arg IMAGE=$(distro) --build-arg TAG=$(tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), eq(variables.distro, 'distroless'))
        inputs:
          command: build
          repository: internal/private/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.$(package)-jdk
          containerRegistry: "Java Engineering ACR"
          arguments: --build-arg INSTALLER_IMAGE=$(distro) --build-arg INSTALLER_TAG=$(installer_tag)-installer --build-arg BASE_IMAGE=$(distro) --build-arg BASE_TAG=$(base_tag)-base --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: push image to container registry
        inputs:
          command: push
          repository: internal/private/openjdk/jdk
          containerRegistry: "Java Engineering ACR"
          tags: |
            $(version)-$(distro)

  - job: wait_for_validation
    dependsOn: build_internal
    displayName: wait for validation
    pool: server
    steps:
      - task: ManualValidation@0
        # 3 days
        timeoutInMinutes: 4320
        inputs:
          instructions: "please validate the build configuration, artifacts, tests, and resume"
          onTimeout: "resume"

  - job: build_public
    displayName: "build public "
    dependsOn: wait_for_validation
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix: ${{ parameters.jobs }}
    steps:
      - script: |
          docker pull $(image):$(tag)
          docker tag $(image):$(tag) $(distro):$(tag)
        displayName: Docker pull and re-tag
        condition: and(succeeded(), ne(variables.distro, 'distroless'))

      - script: |
          docker pull $(installer_image):$(installer_tag)
          docker tag $(installer_image):$(installer_tag) $(distro):$(installer_tag)-installer

          docker pull $(base_image):$(base_tag)
          docker tag $(base_image):$(base_tag) $(distro):$(base_tag)-base
        displayName: Docker pull and re-tag distroless
        condition: and(succeeded(), eq(variables.distro, 'distroless'))

      - task: Docker@2
        displayName: build regular image
        condition: and(succeeded(), ne(variables.distro, 'distroless'))
        inputs:
          command: build
          repository: public/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.$(package)-jdk
          containerRegistry: "Java Engineering ACR"
          arguments: --build-arg IMAGE=$(image) --build-arg TAG=$(tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: build distroless image
        condition: and(succeeded(), eq(variables.distro, 'distroless'))
        inputs:
          command: build
          repository: public/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.$(package)-jdk
          containerRegistry: "Java Engineering ACR"
          arguments: --build-arg INSTALLER_IMAGE=$(distro) --build-arg INSTALLER_TAG=$(installer_tag)-installer --build-arg BASE_IMAGE=$(distro) --build-arg BASE_TAG=$(base_tag)-base --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: push image to container registry
        inputs:
          command: push
          repository: public/openjdk/jdk
          containerRegistry: "Java Engineering ACR"
          tags: |
            $(version)-$(distro)
