# This is a basic workflow to help you get started with Actions

name: Build Docker Images CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_jdk8:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Note: Using secrets will not work with forked pull requests
      - name: Set Mariner 2.0 image
        run: "echo IMAGE=${{ secrets.MARINER_REPO }} >> $GITHUB_ENV"

      # Runs a single command using the runners shell
      - name: Build the image
        run: docker build -t mcr.microsoft.com/openjdk/jdk:8-mariner -f ./docker/mariner/Dockerfile.temurin-8-jdk ./docker/mariner/ --build-arg IMAGE=${{ env.IMAGE }} --build-arg TAG=2.0

  build_images:
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        jdkversion: [11, 16, 17]
        baseimage: ["cbld", "mariner", "mariner-cm1", "ubuntu"]
        include:
          - baseimage: "cbld"
            tag: latest
          - baseimage: "mariner"
            tag: "'2.0'"
          - baseimage: "mariner-cm1"
            tag: "'1.0'"
          - baseimage: "ubuntu"
            tag: "20.04"

    steps:
      - uses: actions/checkout@v2

      # Note: Using secrets will not work with forked pull requests
      - name: Set CBLD image
        if: ${{ matrix.baseimage == 'cbld' }}
        run: "echo IMAGE=${{ secrets.CBLD_REPO }} >> $GITHUB_ENV"

      - name: Set mariner 2.0 image
        if: ${{ matrix.baseimage == 'mariner' }}
        run: "echo IMAGE=${{ secrets.MARINER_REPO }} >> $GITHUB_ENV"

      - name: Set mariner 1.0 image
        if: ${{ matrix.baseimage == 'mariner-cm1' }}
        run: "echo IMAGE=${{ secrets.MARINER_CM1_REPO }} >> $GITHUB_ENV"

      - name: Set ubuntu image
        if: ${{ matrix.baseimage == 'ubuntu' }}
        run: "echo IMAGE=${{ secrets.UBUNTU_REPO }} >> $GITHUB_ENV"

      # Runs a single command using the runners shell
      - name: Build the image
        run: docker build -t mcr.microsoft.com/openjdk/jdk:${{ matrix.jdkversion }}-${{ matrix.baseimage }} -f ./docker/${{ matrix.baseimage }}/Dockerfile.msopenjdk-${{ matrix.jdkversion }}-jdk ./docker/${{ matrix.baseimage }}/ --build-arg IMAGE=${{ env.IMAGE }} --build-arg TAG=${{ matrix.tag }}

  validate_images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Validate the images
      - name: Validate container images
        run: ./validate-docker-images.sh -s -u


