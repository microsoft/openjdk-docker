# build.yml Build pipeline to build JDK docker images. When running the pipeline
# replace "image-repository" value with the location of your docker images (e.g. hub.docker.io/...)
# replace the image tags as needed.

name: "$(Year:yyyy).$(Month).$(BuildID)"

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - .devops
      - .github/workflows
pr: none

parameters:
  - name: jobs
    type: object
    default:
      cbld_11:
        distro: cbld
        version: 11
        package: msopenjdk-11
        image: "image-repository" # set to image repo on pipeline run
        tag: "image-tag" # set to image tag on pipeline run
      ubuntu_11:
        distro: ubuntu
        version: 11
        package: msopenjdk-11
        image: "image-repository"
        tag: "image-tag"
      mariner_cm1_11:
        distro: mariner-cm1
        version: 11
        package: msopenjdk-11
        image: "image-repository"
        tag: "'1.0'"
      distroless_11:
        distro: distroless
        version: 11
        package: msopenjdk-11
        installer_image:
          image: "image-repository"
          tag: "'2.0'"
        base_image:
          image: "image-repository"
          tag: "'2.0'"
      cbld_17:
        distro: cbld
        version: 17
        package: msopenjdk-17
        image: "image-repository"
        tag: "image-tag"
      ubuntu_17:
        distro: ubuntu
        version: 17
        package: msopenjdk-17
        image: "image-repository"
        tag: "image-tag"
      mariner_cm1_17:
        distro: mariner-cm1
        version: 17
        package: msopenjdk-17
        image: "image-repository"
        tag: "'1.0'"
      distroless_17:
        distro: distroless
        version: 17
        package: msopenjdk-17
        installer_image:
          image: "image-repository"
          tag: "'2.0'"
        base_image:
          image: "image-repository"
          tag: "'2.0'"

jobs:
  - job: build_internal
    displayName: "build internal "
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix: ${{ parameters.jobs }}
    steps:
      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), ne($(distro), 'distroless'))
        inputs:
          command: build
          repository: internal/private/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.msopenjdk-$(version)-jdk
          containerRegistry: "msopenjdk ACR"
          arguments: --build-arg IMAGE=$(image) --build-arg TAG=$(tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), eq($(distro), 'distroless'))
        inputs:
          command: build
          repository: internal/private/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.msopenjdk-$(version)-jdk
          containerRegistry: "msopenjdk ACR"
          arguments: --build-arg INSTALLER_IMAGE=$(installer_image.image) --build-arg INSTALLER_TAG=$(installer_image.tag) BASE_IMAGE=$(base_image.image) --build-arg BASE_TAG=$(base_image.tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: push image to container registry
        inputs:
          command: push
          repository: internal/private/openjdk/jdk
          containerRegistry: "msopenjdk ACR"
          tags: |
            $(version)-$(distro)


  - job: wait_for_validation
    dependsOn: build_internal
    displayName: wait for validation
    pool: server
    steps:
      - task: ManualValidation@0
        # 3 days
        timeoutInMinutes: 4320
        inputs:
          instructions: "please validate the build configuration, artifacts, tests, and resume"
          onTimeout: "resume"

  - job: build_public
    displayName: "build public "
    dependsOn: wait_for_validation
    pool:
      vmImage: ubuntu-20.04
    strategy:
      matrix: ${{ parameters.jobs }}
    steps:
      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), ne($(distro), 'distroless'))
        inputs:
          command: build
          repository: public/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.msopenjdk-$(version)-jdk
          containerRegistry: "msopenjdk ACR"
          arguments: --build-arg IMAGE=$(image) --build-arg TAG=$(tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: build image
        condition: and(succeeded(), eq($(distro), 'distroless'))
        inputs:
          command: build
          repository: public/openjdk/jdk
          dockerfile: docker/$(distro)/Dockerfile.msopenjdk-$(version)-jdk
          containerRegistry: "msopenjdk ACR"
          arguments: --build-arg INSTALLER_IMAGE=$(installer_image.image) --build-arg INSTALLER_TAG=$(installer_image.tag) BASE_IMAGE=$(base_image.image) --build-arg BASE_TAG=$(base_image.tag) --build-arg package=$(package)
          tags: |
            $(version)-$(distro)
      - task: Docker@2
        displayName: push image to container registry
        inputs:
          command: push
          repository: public/openjdk/jdk
          containerRegistry: "msopenjdk ACR"
          tags: |
            $(version)-$(distro)
